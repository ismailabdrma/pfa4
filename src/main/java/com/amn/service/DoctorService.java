package com.amn.service;

import com.amn.entity.*;
import com.amn.entity.enums.OTPStatus;
import com.amn.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class DoctorService {

    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;
    private final MedicalFolderRepository medicalFolderRepository;
    private final MedicalRecordRepository medicalRecordRepository;
    private final PrescriptionRepository prescriptionRepository;
    private final OTPRepository otpRepository;

    // Doctor login
    public Optional<Doctor> login(String email, String password) {
        Optional<Doctor> doctorOpt = doctorRepository.findByEmail(email);
        if (doctorOpt.isPresent() && password.equals(doctorOpt.get().getPassword())) {
            return doctorOpt;
        }
        return Optional.empty();
    }

    // Request Access by triggering OTP (code already generated by PatientService)
    public boolean requestAccessToPatient(String cin) {
        Optional<Patient> patientOpt = patientRepository.findByCin(cin);
        return patientOpt.isPresent(); // If patient exists, OTP can be requested separately
    }

    // View Patient MedicalFolder if OTP is valid
    public Optional<MedicalFolder> viewMedicalDocumentAfterOtp(String cin, String code) {
        Patient patient = patientRepository.findByCin(cin)
                .orElseThrow(() -> new RuntimeException("Patient not found"));

        OTP otp = otpRepository.findTopByPatientIdOrderByExpirationDesc(patient.getId())
                .orElseThrow(() -> new RuntimeException("OTP not found"));

        if (otp.getCode().equals(code) && otp.getExpiration().isAfter(LocalDateTime.now())
                && otp.getStatus() == OTPStatus.PENDING) {
            otp.setStatus(OTPStatus.VERIFIED);
            otpRepository.save(otp);
            return medicalFolderRepository.findByPatientId(patient.getId());
        }

        throw new RuntimeException("Invalid or expired OTP");
    }

    // Create a MedicalRecord
    public MedicalRecord createMedicalRecord(Long patientId, MedicalRecord record) {
        Patient patient = patientRepository.findById(patientId)
                .orElseThrow(() -> new RuntimeException("Patient not found"));

        MedicalFolder doc = medicalFolderRepository.findByPatientId(patientId)
                .orElseThrow(() -> new RuntimeException("MedicalFolder not found"));

        record.setCreationDate(LocalDate.now());
        record.setDiagnosis(record.getDiagnosis());
        record.setReason(record.getReason());
        record.setNotes(record.getNotes());
        record.setMedicalFolder(doc);

        return medicalRecordRepository.save(record);
    }

    // Write a Prescription
    public Prescription writePrescription(Long patientId, Prescription prescription) {
        Patient patient = patientRepository.findById(patientId)
                .orElseThrow(() -> new RuntimeException("Patient not found"));

        prescription.setPrescribedDate(LocalDateTime.now());
        prescription.setPatient(patient);

        return prescriptionRepository.save(prescription);
    }
}
